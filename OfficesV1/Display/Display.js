document.addEventListener("data-ready",handleDisplayLogic);const comparisons={"==":(e,t)=>e==t,"===":(e,t)=>e===t,"!=":(e,t)=>e!=t,"!==":(e,t)=>e!==t,">":(e,t)=>parseFloat(e)>parseFloat(t),"<":(e,t)=>parseFloat(e)<parseFloat(t),">=":(e,t)=>parseFloat(e)>=parseFloat(t),"<=":(e,t)=>parseFloat(e)<=parseFloat(t),null:e=>null==e,"!null":e=>null!=e,true:e=>Boolean(e),false:e=>!Boolean(e)};function handleDisplayLogic(){const e=document.querySelectorAll("[cf-display-key]"),t=new Map;e.forEach((e=>{try{const a=e.getAttribute("cf-display-key"),l=e.getAttribute("cf-display-path");let r=e.getAttribute("cf-display-compare")?.trim();if(!a||!l||!r)return void console.warn("Element missing required attributes:",e);if(!t.has(a))try{const e=localStorage.getItem(a);t.set(a,e?JSON.parse(e):null)}catch(e){console.error(`Error parsing data for key ${a}:`,e),t.set(a,null)}const o=l.split(".").reduce(((e,t)=>void 0!==e?.[t]?e[t]:null),t.get(a)),n=r.match(/^(===?|!==?|[<>]=?|null|!null|true|false)(?:\s*'(.*?)')?/),s=n[1];let c=n[2]||"";const i=comparisons[s];if(!i)return void console.warn(`Unsupported operator: "${s}"`,e);e.style.display=i(o,c)?"":"none"}catch(t){console.error("Error processing element:",e,t)}})),document.dispatchEvent(new Event("display-ready"))}